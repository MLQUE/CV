##############the most import thing#######################
#you can just follow https://github.com/CMU-Perceptual-Computing-Lab/openpose/blob/master/doc/installation.md to install openpose
1 install nvidia driver
2 install cuda and cudnn 
git clone https://github.com/CMU-Perceptual-Computing-Lab/openpose
cd /path/to/openpose
cd 3rdparty
git clone https://github.com/CMU-Perceptual-Computing-Lab/caffe
cd caffe
sudo cp ********.Makefile.config.example(choose what you want) Makefile.config 
cd /path/to/openpose
sudo ubuntu/install_cuda.sh
sudo ubuntu/install_cudnn.sh
get the models
COCO model: download in models/pose/coco/.
MPI model: download in models/pose/mpi/.
Face model: download in models/face/.
Hands model: download in models/hand/.
put all in the right way.
3 install some request (you need install the pip first)
sudo bash ./ubuntu/install_cmake.sh
4 install opencv
apt-get install libopencv-dev
5 install cmake gui
sudo apt-get install cmake--qt-gui
5 build openpose use cmake-gui
a /path/to/openpose
b /path/to/openpose/build
c choose Unix Makefiles and use default native compilers finish
d configure and generate
done


############################################################



1 install opencv

sudo apt-get update
sudo apt-get upgrade

Remove any previous installations of x264</h3>
sudo apt-get remove x264 libx264-dev

We will Install dependencies now

sudo apt-get install build-essential checkinstall cmake pkg-config yasm
sudo apt-get install git gfortran
sudo apt-get install libjpeg8-dev libjasper-dev libpng12-dev

# If you are using Ubuntu 14.04
sudo apt-get install libtiff4-dev
# If you are using Ubuntu 16.04
sudo apt-get install libtiff5-dev

sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libdc1394-22-dev
sudo apt-get install libxine2-dev libv4l-dev
sudo apt-get install libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev
sudo apt-get install qt5-default libgtk2.0-dev libtbb-dev
sudo apt-get install libatlas-base-dev
sudo apt-get install libfaac-dev libmp3lame-dev libtheora-dev
sudo apt-get install libvorbis-dev libxvidcore-dev
sudo apt-get install libopencore-amrnb-dev libopencore-amrwb-dev
sudo apt-get install x264 v4l-utils

# Optional dependencies
sudo apt-get install libprotobuf-dev protobuf-compiler
sudo apt-get install libgoogle-glog-dev libgflags-dev
sudo apt-get install libgphoto2-dev libeigen3-dev libhdf5-dev doxygen

git clone https://github.com/opencv/opencv.git
cd opencv 
git checkout 3.3.1(version you want) 
cd ..

git clone https://github.com/opencv/opencv_contrib.git
cd opencv_contrib
git checkout 3.3.1
cd ..

cd opencv
mkdir build
cd build

cmake -D CMAKE_BUILD_TYPE=RELEASE \
      -D CMAKE_INSTALL_PREFIX=/usr/local \
      -D INSTALL_C_EXAMPLES=ON \
      -D INSTALL_PYTHON_EXAMPLES=ON \
      -D WITH_TBB=ON \
      -D WITH_V4L=ON \
      -D WITH_QT=ON \
      -D WITH_OPENGL=ON \
      -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \  #the path to your own opencv_contrib 
      -D BUILD_EXAMPLES=ON ..

nproc #find you core nums
make -j'nproc'  #example make -j12
sudo make install
sudo sh -c 'echo "/usr/local/lib" >> /etc/ld.so.conf.d/opencv.conf'
sudo ldconfig

#test for c++ version
# compile
# There are backticks ( ` ) around pkg-config command not single quotes
g++ -std=c++11 removeRedEyes.cpp `pkg-config --libs --cflags opencv` -o removeRedEyes
# run
./removeRedEyes #download the RemoveRedEyes from internet

2 install cunda8.0+cudnn5.1
sudo sh cuda_8.0.61_375.26_linux.run #download cuda_8.0.61_375.26_linux.run
#add it to env path
sudo gedit /etc/profile
export PATH=/usr/local/cuda-8.0/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64$LD_LIBRARY_PATH
sudo reboot #restart for the path config

tar -zxvf cudnn-8.0-linux-x64-v5.1.tgz #download cudnn and unzip
sudo cp cuda/include/cudnn.h /usr/local/cuda/include/
sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/
sudo chmod a+r /usr/local/cuda/include/cudnn.h
sudo chmod a+r /usr/local/cuda/lib64/libcudnn*

3 install caffe and link it in openpose

git clone https://github.com/BVLC/caffe.git
cd caffe
cp Makefile.config.example Makefile.config
sudo gedit Makefile.config
#edit Makefile.config
1
OPENCV_VERSION :=3 
USE_OPENCV := 0
to
#OPENCV_VERSION :=3 
#USE_OPENCV := 0
2
INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include
LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib 
to
INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial
LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial       

sudo gedit Makefile
#edit Makefile

LIBRARIES +=opencv_imgcodecs
to
LIBRARIES += opencv_imgcodecs  opencv_core opencv_highgui opencv_imgproc opencv_imgcodecs

LIBRARIES += glog gflags protobuf boost_system boost_filesystem m
to
LIBRARIES += glog gflags protobuf boost_system boost_filesystem m hdf5_serial_hl hdf5_serial

cd /path/to/caffe
make all
make test
make runtest #test for caffe install(successful or failure)

4 install openpose

open cmake gui
change the caffe lib and include
click the Configure button 
click the Generate button
cd /path/to/openpose/build
make -j'nproc'
#test for openpose install
./build/examples/openpose/openpose.bin --video examples/media/video.avi










REFERENCE
https://www.learnopencv.com/install-opencv3-on-ubuntu/ #opencv install
https://blog.csdn.net/qq897107499/article/details/79266348  #openpose install(chinese version)
https://github.com/CMU-Perceptual-Computing-Lab/openpose/blob/master/doc/installation.md #openpose install(official)
PROBLEM SOLUTION
udo apt install python-pip
sudo apt install python-numpy
sudo apt install gfortran
################## pip install some pkg modules!!!#################
for req in $(cat python/requirements.txt); do pip install $req; done
sudo pip install -r python/requirements.txt 
###################################################################



